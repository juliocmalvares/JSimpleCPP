/* The following code was generated by JFlex 1.6.1 */

package misc;

//java code

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>scanner.flex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\4\1\55\1\2\1\5\22\0\1\2\1\0\1\0"+
    "\1\0\1\3\5\0\1\7\1\13\1\0\1\13\1\10\1\6\12\1"+
    "\3\0\1\14\3\0\1\53\1\47\1\15\1\45\1\11\1\31\1\51"+
    "\1\41\1\25\2\0\1\33\1\0\1\27\1\17\2\0\1\43\1\35"+
    "\1\23\1\21\1\0\1\37\7\0\1\3\1\0\1\54\1\50\1\16"+
    "\1\46\1\12\1\32\1\52\1\42\1\26\2\3\1\34\1\3\1\30"+
    "\1\20\2\3\1\44\1\36\1\24\1\22\1\3\1\40\3\3\12\0"+
    "\1\55\252\0\2\25\115\0\1\35\u1ea8\0\1\55\1\55\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\1\1\4\1\5"+
    "\1\1\1\4\1\1\1\4\1\1\1\4\1\1\1\4"+
    "\1\1\1\4\1\1\1\4\1\1\1\4\1\1\1\4"+
    "\1\0\1\3\2\0\1\4\3\0\3\4\1\0\1\4"+
    "\1\0\1\6\1\4\1\6\2\0\2\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\1\7\2\3"+
    "\3\0\1\4\1\0\1\10\1\0\1\4\1\10\1\4"+
    "\1\0\1\4\2\11\1\12\1\0\1\12\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\1\4\2\0"+
    "\1\3\2\13\1\14\1\15\1\14\1\15\2\16\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\2\17\1\7\2\0"+
    "\1\4\2\20\1\0\1\4\2\21\2\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\56\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284"+
    "\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4"+
    "\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564"+
    "\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\56"+
    "\0\u06d4\0\270\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8"+
    "\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\56"+
    "\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\56\0\u0a6c"+
    "\0\u0a9a\0\270\0\u0ac8\0\u0af6\0\u0b24\0\56\0\270\0\56"+
    "\0\u0b52\0\270\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66"+
    "\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0986\0\56\0\270"+
    "\0\56\0\56\0\270\0\270\0\56\0\270\0\u0d7a\0\u0da8"+
    "\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\56\0\270\0\u0e8e\0\u0e8e"+
    "\0\u0ebc\0\u0eea\0\56\0\270\0\u0f18\0\u0f46\0\56\0\270"+
    "\0\56\0\270";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\4\1\6\2\2\1\7"+
    "\1\10\1\2\1\11\1\12\1\13\1\2\1\5\1\2"+
    "\1\5\1\14\1\15\1\16\1\17\1\2\1\5\1\20"+
    "\1\21\1\2\1\5\1\22\1\23\1\24\1\25\1\2"+
    "\1\5\1\2\1\5\1\26\1\27\1\30\1\31\1\2"+
    "\1\5\1\2\1\5\60\0\1\3\6\0\1\32\47\0"+
    "\1\4\1\0\2\4\51\0\1\5\1\0\1\5\6\0"+
    "\1\5\3\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\7\0\1\33\1\34\101\0\2\35\22\0\1\5"+
    "\1\0\1\5\6\0\1\5\3\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\35\1\36\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\20\0\2\37\4\0\2\40"+
    "\12\0\2\41\14\0\1\5\1\0\1\5\6\0\1\5"+
    "\3\0\1\5\1\37\1\42\1\0\1\5\1\0\1\5"+
    "\1\40\1\43\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\41\1\44\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\44\0\2\45\12\0\1\5\1\0\1\5\6\0\1\5"+
    "\3\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\45\1\46"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\30\0\2\47\2\50\24\0\1\5\1\0\1\5\6\0"+
    "\1\5\3\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\47\1\51\1\50\1\52\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\20\0\2\53\32\0\2\54\2\0\1\5\1\0"+
    "\1\5\6\0\1\5\3\0\1\5\1\53\1\55\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\54\1\56\24\0\2\57\32\0\1\5\1\0"+
    "\1\5\6\0\1\5\3\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\57\1\60\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\42\0\2\61\14\0\1\5\1\0"+
    "\1\5\6\0\1\5\3\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\61"+
    "\1\62\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\20\0\2\63\36\0\1\5\1\0"+
    "\1\5\6\0\1\5\3\0\1\5\1\63\1\64\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\20\0\2\65\36\0\1\5\1\0"+
    "\1\5\6\0\1\5\3\0\1\5\1\65\1\66\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\2\0\1\67\54\0\4\33\1\70"+
    "\1\71\50\33\7\72\1\73\46\72\35\0\2\74\20\0"+
    "\1\5\1\0\1\5\6\0\1\5\3\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\74\1\75\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\22\0\2\76\62\0"+
    "\2\77\100\0\2\100\2\0\1\5\1\0\1\5\6\0"+
    "\1\5\3\0\1\5\1\0\1\5\1\76\1\101\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\2\0\1\5\1\0\1\5\6\0\1\5\3\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\77\1\102\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\2\0"+
    "\1\5\1\0\1\5\6\0\1\5\3\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\100\1\103\22\0\2\104\34\0"+
    "\1\5\1\0\1\5\6\0\1\5\3\0\1\5\1\0"+
    "\1\5\1\104\1\105\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\24\0\2\106\32\0"+
    "\1\5\1\0\1\5\6\0\1\5\3\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\106\1\107\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\44\0\2\110\44\0"+
    "\2\111\22\0\1\5\1\0\1\5\6\0\1\5\3\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\110\1\112\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\2\0"+
    "\1\5\1\0\1\5\6\0\1\5\3\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\111\1\113\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\44\0\2\114\12\0"+
    "\1\5\1\0\1\5\6\0\1\5\3\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\114\1\115\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\26\0\2\116\30\0"+
    "\1\5\1\0\1\5\6\0\1\5\3\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\116\1\117\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\22\0\2\120\34\0"+
    "\1\5\1\0\1\5\6\0\1\5\3\0\1\5\1\0"+
    "\1\5\1\120\1\121\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\20\0\2\122\36\0"+
    "\1\5\1\0\1\5\6\0\1\5\3\0\1\5\1\122"+
    "\1\123\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\2\0\1\67\7\0"+
    "\2\124\47\0\1\70\51\0\7\72\1\125\54\72\1\126"+
    "\1\125\46\72\11\0\2\127\44\0\1\5\1\0\1\5"+
    "\5\0\1\127\1\130\3\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\24\0\2\131\74\0\2\132\12\0"+
    "\1\5\1\0\1\5\6\0\1\5\3\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\131\1\133\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\2\0\1\5\1\0"+
    "\1\5\6\0\1\5\3\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\132\1\134\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\12\0\2\135\44\0\1\5\1\0"+
    "\1\5\5\0\1\135\1\136\3\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\36\0\2\104\20\0\1\5"+
    "\1\0\1\5\6\0\1\5\3\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\104\1\105\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\26\0\2\137\30\0\1\5"+
    "\1\0\1\5\6\0\1\5\3\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\137\1\140\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\34\0\2\141\22\0\1\5"+
    "\1\0\1\5\6\0\1\5\3\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\141\1\142\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\50\0\2\143\6\0\1\5"+
    "\1\0\1\5\6\0\1\5\3\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\143\1\144"+
    "\1\0\1\5\1\0\1\5\34\0\2\145\22\0\1\5"+
    "\1\0\1\5\6\0\1\5\3\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\145\1\146\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\147\11\0\1\150"+
    "\42\0\6\72\1\70\1\125\46\72\27\0\2\151\26\0"+
    "\1\5\1\0\1\5\6\0\1\5\3\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\151"+
    "\1\152\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\12\0\2\153\44\0"+
    "\1\5\1\0\1\5\5\0\1\153\1\154\3\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\34\0\2\155"+
    "\22\0\1\5\1\0\1\5\6\0\1\5\3\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\155\1\156\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\2\0\1\147"+
    "\125\0\2\157\4\0\1\5\1\0\1\5\6\0\1\5"+
    "\3\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\157\1\160\1\0\1\5"+
    "\12\0\2\161\44\0\1\5\1\0\1\5\5\0\1\161"+
    "\1\162\3\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3956];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\20\1\1\0\1\1\2\0"+
    "\1\1\3\0\3\1\1\0\1\1\1\0\1\11\2\1"+
    "\2\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\11\1\1\3\0\1\1\1\0\1\11"+
    "\1\0\3\1\1\0\1\1\1\11\1\1\1\11\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\1\1\11\1\1\2\11\2\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\2\1\2\0\1\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public int getYYline(){
        return yyline;
    }

    public void setYYline(int line){
        ((Scanner)this).yyline = line;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [55] { return (int) yytext().charAt(0); }");
            { return (int) yytext().charAt(0);
            }
          case 19: break;
          case 2: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [37] { ((Parser)this).yylval = new Integer((String)yytext()); return Parser.INT; }");
            { ((Parser)this).yylval = new Integer((String)yytext()); return Parser.INT;
            }
          case 20: break;
          case 3: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [36] {  }");
            { 
            }
          case 21: break;
          case 4: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [53] { ((Parser)this).yylval = yytext(); return Parser.ID; }");
            { ((Parser)this).yylval = yytext(); return Parser.ID;
            }
          case 22: break;
          case 5: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [39] { return Parser.ATRIB; }");
            { return Parser.ATRIB;
            }
          case 23: break;
          case 6: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [42] { return Parser.IF; }");
            { return Parser.IF;
            }
          case 24: break;
          case 7: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [38] { ((Parser)this).yylval = new Double((String)yytext()); return Parser.DOUBLE; }");
            { ((Parser)this).yylval = new Double((String)yytext()); return Parser.DOUBLE;
            }
          case 25: break;
          case 8: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [41] { return Parser.CIN; }");
            { return Parser.CIN;
            }
          case 26: break;
          case 9: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [46] { return Parser.INT; }");
            { return Parser.INT;
            }
          case 27: break;
          case 10: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [45] { return Parser.FOR; }");
            { return Parser.FOR;
            }
          case 28: break;
          case 11: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [43] { return Parser.ELSE; }");
            { return Parser.ELSE;
            }
          case 29: break;
          case 12: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [40] { return Parser.PRINT; }");
            { return Parser.PRINT;
            }
          case 30: break;
          case 13: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [49] { return Parser.CHAR; }");
            { return Parser.CHAR;
            }
          case 31: break;
          case 14: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [52] { return Parser.BOOLEAN; }");
            { return Parser.BOOLEAN;
            }
          case 32: break;
          case 15: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [50] { return Parser.BOOL; }");
            { return Parser.BOOL;
            }
          case 33: break;
          case 16: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [44] { return Parser.WHILE; }");
            { return Parser.WHILE;
            }
          case 34: break;
          case 17: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [48] { return Parser.STRING; }");
            { return Parser.STRING;
            }
          case 35: break;
          case 18: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [47] { return Parser.DOUBLE; }");
            { return Parser.DOUBLE;
            }
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          do {
            System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
